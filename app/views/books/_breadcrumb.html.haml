:javascript
  function go_to(sort_type){
    searchquery = window.location.href.split('?')[1]
    if(searchquery == null || searchquery == ''){
      searchquery = "sort_type=" + sort_type;
    }
    else if(searchquery.toLowerCase().indexOf("sort_type") != -1){
      var vars = searchquery.split('&');
      for (var i = 0; i <vars.length; i++){
        if(vars[i].indexOf("sort_type") == 0){
          if(sort_type == 'none'){
            if(searchquery.indexOf("&sort_type") != -1){
              searchquery = searchquery.replace("&" + vars[i], "");
            }
            else{
              searchquery = searchquery.replace(vars[i], "");
            }
          }
          else{
            searchquery = searchquery.replace(vars[i], "sort_type=" + sort_type);
          }
          break;
        }
      }
    }
    else{
      searchquery += "&sort_type=" + sort_type;
    }
    window.location = window.location.href.split('?')[0] + "?" + searchquery;
  }
  
%small
  - @query_array.each do |key, val|
    - if(val != '')
      - val.each do |term|
        .tab.center-block
          = term
          .close
            = link_to :params => removeBreadCrumb(@url_params, key, term) do
              ="&times;".html_safe

- if (@query_array.any? and !(session[:user_id].nil?) and !(@query == "*:*"))
  .savequery.pull-right
    = link_to I18n.t(:save_query) , {:controller => :user_search_history, :action => :save_query, :query => parse_url_params(@url_params), :user_id => session[:user_id]}, :class => "btn btn-success btn-sm"
    = link_to I18n.t(:clear) , {:controller => :books, :action => :index}, :class => "btn btn-warning btn-sm" 

.clearfix
.col-md-7.sort.text-muted.pull-right
  .text-right
    %small
      = I18n.t(:sort_by)
      %i.fa.fa-check-square{:style => "#{get_class_for_sort_option(params[:sort_type],'views')}; cursor:pointer;", :onclick => "go_to ('none');"}
      %i.fa.fa-square-o{:style => "#{get_class_for_active_sort_option(params[:sort_type],'views')}; cursor:pointer;", :onclick=> "go_to('views desc');"}
      %a{:style=> "color:#777777;"} #{I18n.t(:viewed)}
      %i.fa.fa-arrow-down{:style => "#{get_class_for_sort_option(params[:sort_type],'views desc')}; cursor:pointer;", :onclick => "go_to('views asc');"}
      %i.fa.fa-arrow-up{:style => "#{get_class_for_sort_option(params[:sort_type],'views asc')}; cursor:pointer;", :onclick => "go_to('views desc');"}
      %span |
      %i.fa.fa-check-square{:style => "#{get_class_for_sort_option(params[:sort_type],'rate')}; cursor:pointer;", :onclick => "go_to ('none');"}
      %i.fa.fa-square-o{:style => "#{get_class_for_active_sort_option(params[:sort_type],'rate')}; cursor:pointer;", :onclick=> "go_to('rate desc');"}
      %a{:style=> "color:#777777;"} #{I18n.t(:rates)}
      %i.fa.fa-arrow-down{:style => "#{get_class_for_sort_option(params[:sort_type],'rate desc')}; cursor:pointer;", :onclick => "go_to('rate asc');"}
      %i.fa.fa-arrow-up{:style => "#{get_class_for_sort_option(params[:sort_type],'rate asc')}; cursor:pointer;", :onclick => "go_to('rate desc');"}
      %span |
      %i.fa.fa-check-square{:style => "#{get_class_for_sort_option(params[:sort_type],'single_bok_title')}; cursor:pointer;", :onclick => "go_to ('none');"}
      %i.fa.fa-square-o{:style => "#{get_class_for_active_sort_option(params[:sort_type],'single_bok_title')}; cursor:pointer;", :onclick=> "go_to('single_bok_title asc');"}
      %a{:style=> "color:#777777;"} #{I18n.t(:title)}
      %i.fa.fa-arrow-down{:style => "#{get_class_for_sort_option(params[:sort_type],'single_bok_title desc')}; cursor:pointer;", :onclick => "go_to('single_bok_title asc');"}
      %i.fa.fa-arrow-up{:style => "#{get_class_for_sort_option(params[:sort_type],'single_bok_title asc')}; cursor:pointer;", :onclick => "go_to('single_bok_title desc');"}



%h4.text-muted.clearfix
  - if(@query != "*:*")
    = I18n.t(:books_found, :count => @response['response']['numFound'])
  - else
    =I18n.t(:books_found_all, :count => @response['response']['numFound'])
%hr